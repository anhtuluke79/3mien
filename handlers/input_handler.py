from utils.bot_functions import split_numbers, ghep_xien, ghep_cang
from utils.phongthuy.phongthuy import chuan_hoa_can_chi, get_can_chi_ngay, sinh_so_hap_cho_ngay
from itertools import permutations

async def all_text_handler(update, context):
    # Gh√©p c√†ng 3D - b∆∞·ªõc 1: nh·∫≠p s·ªë
    if context.user_data.get('wait_for_cang3d_numbers'):
        numbers = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit() and len(n) == 2]
        if not numbers:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c s·ªë 2 ch·ªØ s·ªë (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, vd: 23 34 56).")
            return
        context.user_data['cang3d_numbers'] = numbers
        context.user_data['wait_for_cang3d_numbers'] = False
        context.user_data['wait_for_cang3d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng (1 ch·ªØ s·ªë, c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, vd: 1 2 3):")
        return

    # Gh√©p c√†ng 3D - b∆∞·ªõc 2: nh·∫≠p c√†ng
    if context.user_data.get('wait_for_cang3d_cangs'):
        cangs = [c for c in update.message.text.replace(',', ' ').split() if c.isdigit() and len(c) == 1]
        if not cangs:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (1 ch·ªØ s·ªë, vd: 1 2 3):")
            return
        numbers = context.user_data.get('cang3d_numbers', [])
        result = []
        for c in cangs:
            for n in numbers:
                result.append(f"{c}{n}")
        await update.message.reply_text(','.join(result))
        context.user_data['wait_for_cang3d_cangs'] = False
        context.user_data['cang3d_numbers'] = []
        return

    # Gh√©p c√†ng 4D - b∆∞·ªõc 1: nh·∫≠p s·ªë
    if context.user_data.get('wait_for_cang4d_numbers'):
        numbers = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit() and len(n) == 3]
        if not numbers:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c s·ªë 3 ch·ªØ s·ªë (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, vd: 123 234 456).")
            return
        context.user_data['cang4d_numbers'] = numbers
        context.user_data['wait_for_cang4d_numbers'] = False
        context.user_data['wait_for_cang4d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng (1 ch·ªØ s·ªë, vd: 1 2 3):")
        return

    # Gh√©p c√†ng 4D - b∆∞·ªõc 2: nh·∫≠p c√†ng
    if context.user_data.get('wait_for_cang4d_cangs'):
        cangs = [c for c in update.message.text.replace(',', ' ').split() if c.isdigit() and len(c) == 1]
        if not cangs:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (1 ch·ªØ s·ªë, vd: 1 2 3):")
            return
        numbers = context.user_data.get('cang4d_numbers', [])
        result = []
        for c in cangs:
            for n in numbers:
                result.append(f"{c}{n}")
        await update.message.reply_text(','.join(result))
        context.user_data['wait_for_cang4d_cangs'] = False
        context.user_data['cang4d_numbers'] = []
        return

    # ƒê·∫£o s·ªë (h√†m h·ªó tr·ª£ c·∫£ 3 s·ªë, 4 s·ªë, nhi·ªÅu s·ªë)
    if context.user_data.get('wait_for_daoso'):
        arr = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not arr:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë (vd: 123, 1234 ho·∫∑c 23 45 67 ...).")
            return
        result = []
        for num in arr:
            if 2 <= len(num) <= 6:
                perm = set([''.join(p) for p in permutations(num)])
                result.append(','.join(sorted(perm)))
            else:
                result.append(num)
        await update.message.reply_text('\n'.join(result))
        context.user_data['wait_for_daoso'] = False
        return

    if context.user_data.get('wait_for_feedback'):
        # G·ª≠i g√≥p √Ω v·ªÅ cho admin (tu·ª≥ ch·ªânh theo √Ω b·∫°n)
        ADMIN_ID = int(os.getenv("ADMIN_ID", "12345678"))
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚úâÔ∏è G√≥p √Ω t·ª´ user @{update.effective_user.username}:\n{update.message.text}"
            )
        except Exception:
            pass
        await update.message.reply_text("üôè C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p √Ω ki·∫øn! Bot s·∫Ω ti·∫øp nh·∫≠n v√† ph·∫£n h·ªìi s·ªõm nh·∫•t.")
        context.user_data['wait_for_feedback'] = False
        return
    # Gh√©p xi√™n
    if context.user_data.get('wait_for_xien_input'):
        do_dai = context.user_data.get('do_dai')
        text = update.message.text.strip()
        numbers = split_numbers(text)
        if len(numbers) < do_dai:
            await update.message.reply_text(f"B·∫°n c·∫ßn nh·∫≠p √≠t nh·∫•t {do_dai} s·ªë!")
            context.user_data['wait_for_xien_input'] = False
            return
        bo_xien = ghep_xien(numbers, do_dai)
        if not bo_xien:
            await update.message.reply_text("Kh√¥ng gh√©p ƒë∆∞·ª£c b·ªô xi√™n n√†o.")
        else:
            preview = ', '.join(bo_xien[:100])
            await update.message.reply_text(
                f"‚úÖ {len(bo_xien)} b·ªô xi√™n {do_dai}:\n{preview}"
            )
        context.user_data['wait_for_xien_input'] = False
        return

    # Phong th·ªßy ng√†y (d∆∞∆°ng)
    if context.user_data.get('wait_phongthuy_ngay') == 'duong':
        ngay = update.message.text.strip()
        try:
            y, m, d = map(int, ngay.split('-'))
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            if not sohap_info:
                await update.message.reply_text(f"Kh√¥ng tra ƒë∆∞·ª£c s·ªë h·∫°p cho ng√†y {can_chi}.")
            else:
                so_ghep = set(sohap_info['so_gh√©p'])
                text = (
                    f"üîÆ Phong th·ªßy ng√†y {can_chi} ({d:02d}/{m:02d}/{y}):\n"
                    f"- Can: {sohap_info['can']}, {sohap_info['am_duong']}, {sohap_info['ngu_hanh']}\n"
                    f"- S·ªë m·ªánh (ng≈© h√†nh): {sohap_info['so_menh']}\n"
                    f"- S·ªë h·∫°p c·ªßa ng√†y: {', '.join(sohap_info['so_hap_list'])}\n"
                    f"- B·ªô s·ªë gh√©p ƒë·∫∑c bi·ªát: {', '.join(so_ghep)}\n"
                )
                await update.message.reply_text(text)
        except Exception:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.")
        context.user_data['wait_phongthuy_ngay'] = False
        return

    # Phong th·ªßy ng√†y (can chi)
    if context.user_data.get('wait_phongthuy_ngay') == 'canchi':
        can_chi = chuan_hoa_can_chi(update.message.text.strip())
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        if not sohap_info:
            await update.message.reply_text(f"Kh√¥ng tra ƒë∆∞·ª£c s·ªë h·∫°p cho ng√†y {can_chi}.")
        else:
            so_ghep = set(sohap_info['so_gh√©p'])
            text = (
                f"üîÆ Phong th·ªßy ng√†y {can_chi}:\n"
                f"- Can: {sohap_info['can']}, {sohap_info['am_duong']}, {sohap_info['ngu_hanh']}\n"
                f"- S·ªë m·ªánh (ng≈© h√†nh): {sohap_info['so_menh']}\n"
                f"- S·ªë h·∫°p c·ªßa ng√†y: {', '.join(sohap_info['so_hap_list'])}\n"
                f"- B·ªô s·ªë gh√©p ƒë·∫∑c bi·ªát: {', '.join(so_ghep)}\n"
            )
            await update.message.reply_text(text)
        context.user_data['wait_phongthuy_ngay'] = False
        return

    # N·∫øu kh√¥ng r∆°i v√†o b·∫•t c·ª© thao t√°c n√†o ƒëang ch·ªù, bot s·∫Ω kh√¥ng ph·∫£n h·ªìi g√¨!
    return
