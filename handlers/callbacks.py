from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.bot_functions import (
    split_numbers, ghep_xien, ghep_cang, chuan_hoa_can_chi,
    get_can_chi_ngay, sinh_so_hap_cho_ngay, crawl_lich_su_xsmb
)
import pandas as pd
import joblib
import os

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "12345678").split(',')))

async def menu_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # --- GH√âP XI√äN ---
    if query.data == "ghepxien":
        keyboard = [
            [
                InlineKeyboardButton("Xi√™n 2", callback_data="ghepxien_2"),
                InlineKeyboardButton("Xi√™n 3", callback_data="ghepxien_3"),
                InlineKeyboardButton("Xi√™n 4", callback_data="ghepxien_4"),
            ]
        ]
        await query.edit_message_text("Ch·ªçn d·∫°ng gh√©p xi√™n:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("ghepxien_"):
        do_dai = int(query.data.split("_")[1])
        context.user_data['do_dai'] = do_dai
        context.user_data['wait_for_xien_input'] = True
        await query.edit_message_text(
            f"Nh·∫≠p d√£y s·ªë (c√°ch nhau b·ªüi d·∫•u c√°ch ho·∫∑c ph·∫©y) ƒë·ªÉ gh√©p xi√™n {do_dai}:"
        )

    # --- GH√âP C√ÄNG ---
    elif query.data == "ghepcang":
        keyboard = [
            [
                InlineKeyboardButton("Gh√©p c√†ng 3D", callback_data="ghepcang_3d"),
                InlineKeyboardButton("Gh√©p c√†ng 4D", callback_data="ghepcang_4d"),
            ],
            [
                InlineKeyboardButton("ƒê·∫£o s·ªë", callback_data="daoso"),
            ]
        ]
        await query.edit_message_text("Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "ghepcang_3d":
        context.user_data.clear()
        context.user_data['wait_for_cang3d_numbers'] = True
        await query.edit_message_text("Nh·∫≠p c√°c s·ªë 2 ch·ªØ s·ªë ƒë·ªÉ gh√©p (c√°ch nhau b·ªüi d·∫•u c√°ch ho·∫∑c ph·∫©y):")

    elif query.data == "ghepcang_4d":
        context.user_data.clear()
        context.user_data['wait_for_cang4d_numbers'] = True
        await query.edit_message_text("Nh·∫≠p c√°c s·ªë 3 ch·ªØ s·ªë ƒë·ªÉ gh√©p (c√°ch nhau b·ªüi d·∫•u c√°ch ho·∫∑c ph·∫©y):")

    elif query.data == "daoso":
        context.user_data.clear()
        context.user_data['wait_for_daoso'] = True
        await query.edit_message_text("Nh·∫≠p s·ªë c·∫ßn ƒë·∫£o (vd: 123, 1234, ho·∫∑c nhi·ªÅu s·ªë c√°ch nhau d·∫•u c√°ch):")

    # --- TH·ªêNG K√ä X·ªî S·ªê ---
    elif query.data == "thongke":
        try:
            df = pd.read_csv('xsmb.csv')
            dbs = df['ƒêB'].astype(str).str[-2:]
            counts = dbs.value_counts().head(10)
            top_list = "\n".join([f"S·ªë {i}: {v} l·∫ßn" for i, v in counts.items()])
            today_db = dbs.iloc[0] if len(dbs) > 0 else "?"
            text = (
                f"üìà Top 10 s·ªë ƒêB xu·∫•t hi·ªán nhi·ªÅu nh·∫•t 30 ng√†y g·∫ßn nh·∫•t:\n{top_list}\n"
                f"\nüéØ S·ªë ƒêB h√¥m nay: {today_db}"
            )
            await query.edit_message_text(text)
        except Exception as e:
            await query.edit_message_text(f"L·ªói th·ªëng k√™: {e}")

    # --- PHONG TH·ª¶Y NG√ÄY ---
    elif query.data == "phongthuy_ngay":
        keyboard = [
            [InlineKeyboardButton("Nh·∫≠p ng√†y d∆∞∆°ng (YYYY-MM-DD)", callback_data="ptn_ngay_duong")],
            [InlineKeyboardButton("Nh·∫≠p can chi (v√≠ d·ª•: Gi√°p T√Ω)", callback_data="ptn_can_chi")]
        ]
        await query.edit_message_text("B·∫°n mu·ªën tra phong th·ªßy theo ki·ªÉu n√†o?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "ptn_ngay_duong":
        await query.edit_message_text("Nh·∫≠p ng√†y d∆∞∆°ng l·ªãch (YYYY-MM-DD):")
        context.user_data['wait_phongthuy_ngay'] = 'duong'

    elif query.data == "ptn_can_chi":
        await query.edit_message_text("Nh·∫≠p can chi (v√≠ d·ª•: Gi√°p T√Ω):")
        context.user_data['wait_phongthuy_ngay'] = 'canchi'

    # --- D·ª∞ ƒêO√ÅN AI ---
    elif query.data == "du_doan_ai":
        try:
            df = pd.read_csv('xsmb.csv')
            df = df.dropna()
            dbs = df['ƒêB'].astype(str).str[-2:].astype(int)
            if not os.path.exists('model_rf_loto.pkl'):
                await query.edit_message_text("Ch∆∞a c√≥ m√¥ h√¨nh AI, c·∫ßn train tr∆∞·ªõc b·∫±ng n√∫t Train l·∫°i AI.")
                return
            model = joblib.load('model_rf_loto.pkl')
            last7 = dbs[:7].tolist()
            if len(last7) < 7:
                await query.edit_message_text("Kh√¥ng ƒë·ªß d·ªØ li·ªáu 7 ng√†y ƒë·ªÉ d·ª± ƒëo√°n!")
                return
            probs = model.predict_proba([last7])[0]
            top_idx = probs.argsort()[-3:][::-1]
            ketqua = [f"{model.classes_[i]:02d}" for i in top_idx]
            await query.edit_message_text(
                "ü§ñ D·ª± ƒëo√°n AI (RandomForest) cho l·∫ßn quay ti·∫øp theo:\n"
                f"Top 3 s·ªë: {', '.join(ketqua)}"
            )
        except Exception as e:
            await query.edit_message_text(f"L·ªói d·ª± ƒëo√°n AI: {e}")

    # --- TRAIN MODEL (ADMIN) ---
    elif query.data == "train_model":
        if user_id not in ADMIN_IDS:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn train l·∫°i m√¥ h√¨nh!")
            return
        try:
            await query.edit_message_text("‚è≥ ƒêang train l·∫°i AI, vui l√≤ng ƒë·ª£i...")
            df = pd.read_csv('xsmb.csv')
            df = df.dropna()
            dbs = df['ƒêB'].astype(str).str[-2:].astype(int)
            X, y = [], []
            for i in range(len(dbs) - 7):
                features = dbs[i:i+7].tolist()
                label = dbs[i+7]
                X.append(features)
                y.append(label)
            from sklearn.ensemble import RandomForestClassifier
            model = RandomForestClassifier(n_estimators=100, random_state=42)
            model.fit(X, y)
            joblib.dump(model, 'model_rf_loto.pkl')
            await query.edit_message_text("‚úÖ ƒê√£ train l·∫°i v√† l∆∞u m√¥ h√¨nh th√†nh c√¥ng!")
        except Exception as e:
            await query.edit_message_text(f"L·ªói khi train m√¥ h√¨nh: {e}")

    # --- C·∫¨P NH·∫¨T XSMB (ADMIN) ---
    elif query.data == "capnhat_xsmb":
        if user_id not in ADMIN_IDS:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t d·ªØ li·ªáu!")
            return
        try:
            ok = crawl_lich_su_xsmb("xsmb.csv")
            if ok:
                await query.edit_message_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu xsmb.csv th√†nh c√¥ng (t·ª´ xsmn.mobi)!")
            else:
                await query.edit_message_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu m·ªõi, vui l√≤ng th·ª≠ l·∫°i sau.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå L·ªói c·∫≠p nh·∫≠t: {e}")

    else:
        await query.edit_message_text("Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn.")
