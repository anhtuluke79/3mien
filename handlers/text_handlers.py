from telegram import Update
from telegram.ext import ContextTypes
from utils.utils import split_numbers, ghep_xien, dao_so
from utils.can_chi_utils import (
    get_can_chi_ngay,
    sinh_so_hap_cho_ngay,
    phong_thuy_format,
    chot_so_format,
    chuan_hoa_can_chi
)
from datetime import datetime

async def all_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    msg = update.message.text.strip()

    # ======= Gh√©p xi√™n =======
    if 'wait_for_xien_input' in user_data:
        do_dai = user_data['wait_for_xien_input']
        numbers = split_numbers(msg)
        xiens = ghep_xien(numbers, do_dai)
        if not xiens:
            await update.message.reply_text("‚ö†Ô∏è Kh√¥ng gh√©p ƒë∆∞·ª£c xi√™n, vui l√≤ng nh·∫≠p l·∫°i.")
        else:
            reply = f"{len(xiens)} b·ªô xi√™n {do_dai}:\n" + ', '.join(xiens[:50])
            await update.message.reply_text(reply)
        user_data.clear()
        return

    # ======= Gh√©p c√†ng 3D =======
    if user_data.get("wait_cang3d_numbers"):
        arr = split_numbers(msg)
        if not arr or not all(len(n) == 2 for n in arr):
            await update.message.reply_text("‚ö†Ô∏è M·ªói s·ªë c·∫ßn ƒë√∫ng 2 ch·ªØ s·ªë! (VD: 12 34 56)")
            return
        user_data["cang3d_numbers"] = arr
        user_data["wait_cang3d_numbers"] = False
        user_data["wait_cang_input"] = "3D"
        await update.message.reply_text("üì• Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (VD: 1 2 3):")
        return

    # ======= Gh√©p c√†ng 4D =======
    if user_data.get("wait_cang4d_numbers"):
        arr = split_numbers(msg)
        if not arr or not all(len(n) == 3 for n in arr):
            await update.message.reply_text("‚ö†Ô∏è M·ªói s·ªë c·∫ßn ƒë√∫ng 3 ch·ªØ s·ªë! (VD: 123 456 789)")
            return
        user_data["cang4d_numbers"] = arr
        user_data["wait_cang4d_numbers"] = False
        user_data["wait_cang_input"] = "4D"
        await update.message.reply_text("üì• Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (VD: 1 2 3):")
        return

    # ======= X·ª≠ l√Ω gh√©p c√†ng sau khi ƒë√£ c√≥ d√†n =======
    if user_data.get("wait_cang_input"):
        kind = user_data["wait_cang_input"]
        numbers = user_data.get("cang3d_numbers" if kind == "3D" else "cang4d_numbers", [])
        cangs = split_numbers(msg)
        if not cangs:
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 c√†ng.")
            return
        result = [c + n for c in cangs for n in numbers]
        await update.message.reply_text(f"‚úÖ Gh√©p {kind}: {len(result)} s·ªë\n" + ', '.join(result))
        user_data.clear()
        return

    # ======= ƒê·∫£o s·ªë =======
    if user_data.get("wait_for_dao_input"):
        arr = split_numbers(msg)
        s_concat = ''.join(arr) if arr else msg.replace(' ', '')
        if not s_concat.isdigit() or len(s_concat) < 2 or len(s_concat) > 6:
            await update.message.reply_text("Nh·∫≠p 1 s·ªë c√≥ t·ª´ 2 ƒë·∫øn 6 ch·ªØ s·ªë (VD: 1234, 56789).")
        else:
            result = dao_so(s_concat)
            if len(result) > 20:
                text = '\n'.join([', '.join(result[i:i+10]) for i in range(0, len(result), 10)])
            else:
                text = ', '.join(result)
            await update.message.reply_text(f"T·ªïng {len(result)} ho√°n v·ªã:\n{text}")
        user_data.clear()
        return

    # ======= Phong th·ªßy s·ªë theo ng√†y (nhi·ªÅu ƒë·ªãnh d·∫°ng) =======
    if user_data.get('wait_phongthuy_ngay_duong'):
        ngay = msg
        try:
            # H·ªó tr·ª£ nhi·ªÅu lo·∫°i ph√¢n c√°ch
            for sep in ["-", "/", "."]:
                if sep in ngay:
                    parts = [int(x) for x in ngay.split(sep)]
                    break
            else:
                raise ValueError("Sai ƒë·ªãnh d·∫°ng")
            now = datetime.now()
            if len(parts) == 3:
                # N·∫øu nƒÉm ·ªü ƒë·∫ßu (yyyy-mm-dd) hay cu·ªëi (dd-mm-yyyy)
                if parts[0] > 31:  # yyyy-mm-dd
                    y, m, d = parts
                else:
                    d, m, y = parts
            elif len(parts) == 2:
                d, m = parts
                y = now.year
            else:
                raise ValueError("Sai ƒë·ªãnh d·∫°ng")
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            text = phong_thuy_format(can_chi, sohap_info)
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception:
            await update.message.reply_text("‚ùóÔ∏è Nh·∫≠p ng√†y kh√¥ng h·ª£p l·ªá! D√πng d·∫°ng YYYY-MM-DD ho·∫∑c DD-MM, v√≠ d·ª•: 2024-07-22 ho·∫∑c 22-07.")
        user_data['wait_phongthuy_ngay_duong'] = False
        return

    # ======= Phong th·ªßy s·ªë theo can chi =======
    if user_data.get('wait_phongthuy_ngay_canchi'):
        can_chi = chuan_hoa_can_chi(msg)
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        if sohap_info is None:
            await update.message.reply_text("‚ùóÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin can chi ho·∫∑c s·ªë h·∫°p v·ªõi t√™n b·∫°n nh·∫≠p! Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng (VD: Gi√°p T√Ω).")
        else:
            text = phong_thuy_format(can_chi, sohap_info)
            await update.message.reply_text(text, parse_mode="Markdown")
        user_data['wait_phongthuy_ngay_canchi'] = False
        return

    # Kh√¥ng tr·∫£ l·ªùi tin nh·∫Øn t·ª± do!
    return
