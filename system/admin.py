from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
import os

# ƒê·∫∑t danh s√°ch admin t·∫°i ƒë√¢y ho·∫∑c l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
ADMIN_IDS = set(
    int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(",")
)

def get_admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã Xem log s·ª≠ d·ª•ng", callback_data="admin_view_log")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Tr·ªü v·ªÅ menu", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def log_user_action(action):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user = update.effective_user
            with open("user_log.txt", "a", encoding="utf-8") as f:
                f.write(f"{user.id}|{user.username}|{user.first_name}|{action}\n")
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = "üõ°Ô∏è *Menu qu·∫£n tr·ªã* (d√†nh cho admin):\n- Xem log s·ª≠ d·ª•ng\n- Qu·∫£n l√Ω menu kh√°c (n√¢ng c·∫•p sau)"
    if user_id not in ADMIN_IDS:
        text = "‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p menu qu·∫£n tr·ªã!"
        if getattr(update, "message", None):
            await update.message.reply_text(text, parse_mode="Markdown")
        elif getattr(update, "callback_query", None):
            await update.callback_query.edit_message_text(text, parse_mode="Markdown")
        return

    if getattr(update, "message", None):
        await update.message.reply_text(
            text, parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())
    elif getattr(update, "callback_query", None):
        await update.callback_query.edit_message_text(
            text, parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!", parse_mode="Markdown")
        return
    if data == "admin_view_log":
        try:
            with open("user_log.txt", "r", encoding="utf-8") as f:
                log_lines = f.readlines()[-30:]  # Hi·ªÉn th·ªã 30 d√≤ng cu·ªëi
            log_text = "*Log s·ª≠ d·ª•ng g·∫ßn nh·∫•t:*\n" + "".join([f"- {line}" for line in log_lines])
        except Exception:
            log_text = "Kh√¥ng c√≥ log n√†o."
        await query.edit_message_text(log_text[:4096], parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())
    else:
        await query.edit_message_text("‚ùì Ch·ª©c nƒÉng qu·∫£n tr·ªã ch∆∞a h·ªó tr·ª£.", reply_markup=get_admin_menu_keyboard())
