from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
import os
from telegram.constants import ParseMode
import threading

ADMIN_IDS = set(
    int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(",")
)

def get_admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã Xem log s·ª≠ d·ª•ng", callback_data="admin_view_log")],
        [InlineKeyboardButton("üì• Crawl XSMB (ch·ªçn s·ªë ng√†y)", callback_data="admin_crawl_xsmb")],
        [InlineKeyboardButton("‚¨ÜÔ∏è Upload xsmb.csv l√™n GitHub", callback_data="admin_upload_github")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Tr·ªü v·ªÅ menu", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_crawl_days_keyboard():
    keyboard = [
        [InlineKeyboardButton("10 ng√†y", callback_data="admin_crawl_days_10"),
         InlineKeyboardButton("30 ng√†y", callback_data="admin_crawl_days_30")],
        [InlineKeyboardButton("60 ng√†y", callback_data="admin_crawl_days_60"),
         InlineKeyboardButton("100 ng√†y", callback_data="admin_crawl_days_100")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Qu·∫£n tr·ªã", callback_data="admin_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def log_user_action(action):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user = update.effective_user
            with open("user_log.txt", "a", encoding="utf-8") as f:
                f.write(f"{user.id}|{user.username}|{user.first_name}|{action}\n")
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = "üõ°Ô∏è *Menu qu·∫£n tr·ªã* (ch·ªâ admin):\n- Xem log\n- Crawl XSMB\n- Upload l√™n GitHub\n- ... (n√¢ng c·∫•p sau)"
    if user_id not in ADMIN_IDS:
        text = "‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p menu qu·∫£n tr·ªã!"
        if getattr(update, "message", None):
            await update.message.reply_text(text, parse_mode="Markdown")
        elif getattr(update, "callback_query", None):
            await update.callback_query.edit_message_text(text, parse_mode="Markdown")
        return

    if getattr(update, "message", None):
        await update.message.reply_text(
            text, parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())
    elif getattr(update, "callback_query", None):
        await update.callback_query.edit_message_text(
            text, parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!", parse_mode="Markdown")
        return

    if data == "admin_menu":
        await admin_menu(update, context)
        return

    # ---- XEM LOG ----
    if data == "admin_view_log":
        try:
            with open("user_log.txt", "r", encoding="utf-8") as f:
                log_lines = f.readlines()[-30:]
            log_text = "*Log s·ª≠ d·ª•ng g·∫ßn nh·∫•t:*\n" + "".join([f"- {line}" for line in log_lines])
        except Exception:
            log_text = "Kh√¥ng c√≥ log n√†o."
        await query.edit_message_text(log_text[:4096], parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())
        return

    # ---- CRAWL XSMB (ch·ªçn s·ªë ng√†y) ----
    elif data == "admin_crawl_xsmb":
        await query.edit_message_text(
            "Ch·ªçn s·ªë ng√†y mu·ªën crawl d·ªØ li·ªáu XSMB:",
            reply_markup=get_crawl_days_keyboard()
        )
        return

    elif data.startswith("admin_crawl_days_"):
        days = int(data.split("_")[-1])
        await query.edit_message_text(
            f"‚è≥ ƒêang crawl {days} ng√†y XSMB, vui l√≤ng ƒë·ª£i...",
            reply_markup=get_admin_menu_keyboard()
        )
        async def do_crawl(chat_id, context, days):
            from utils.crawler import crawl_xsmb_Nngay_minhchinh_csv
            try:
                df = crawl_xsmb_Nngay_minhchinh_csv(days, "xsmb.csv", delay_sec=6, use_random_delay=True)
                if df is not None and not df.empty:
                    msg = f"‚úÖ ƒê√£ crawl xong {days} ng√†y XSMB!\nS·ªë d√≤ng hi·ªán c√≥: {len(df)}.\nG·ª≠i file xsmb.csv v·ªÅ cho b·∫°n."
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=open("xsmb.csv", "rb"),
                        filename="xsmb.csv",
                        caption=msg
                    )
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå L·ªói: Crawl kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi!"
                    )
            except Exception as e:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå L·ªói khi crawl: {e}"
                )
        # S·ª≠ d·ª•ng create_task ƒë·ªÉ ch·∫°y background
        context.application.create_task(do_crawl(query.message.chat_id, context, days))
        return

    # ---- UPLOAD xsmb.csv l√™n GITHUB ----
    elif data == "admin_upload_github":
        await query.edit_message_text(
            "‚è≥ ƒêang upload file xsmb.csv l√™n GitHub, vui l√≤ng ƒë·ª£i...",
            reply_markup=get_admin_menu_keyboard()
        )
        async def do_upload(chat_id, context):
            try:
                from utils.upload_github import upload_file_to_github
                github_token = os.getenv("GITHUB_TOKEN")
                upload_file_to_github(
                    local_file_path="xsmb.csv",
                    repo_name="anhtuluke79/3mien",
                    remote_path="xsmb.csv",
                    commit_message="C·∫≠p nh·∫≠t xsmb.csv t·ª´ Telegram admin",
                    github_token=github_token
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ ƒê√£ upload xsmb.csv l√™n GitHub th√†nh c√¥ng!",
                    reply_markup=get_admin_menu_keyboard()
                )
            except Exception as e:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå L·ªói khi upload GitHub: {e}",
                    reply_markup=get_admin_menu_keyboard()
                )
        context.application.create_task(do_upload(query.message.chat_id, context))
        return

    # ---- DEFAULT ----
    else:
        await query.edit_message_text("‚ùì Ch·ª©c nƒÉng qu·∫£n tr·ªã ch∆∞a h·ªó tr·ª£.", reply_markup=get_admin_menu_keyboard())
