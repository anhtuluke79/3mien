from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from datetime import datetime

# --- D·ªØ li·ªáu m·∫´u Can Chi v√† chu·ªói s·ªë ---
from can_chi_dict import data as CAN_CHI_DICT  # dict: "Gi√°p T√Ω": "4-9,4"
from thien_can import CAN_INFO  # dict: "Gi√°p": {...}

CAN_LIST = ['Gi√°p', '·∫§t', 'B√≠nh', 'ƒêinh', 'M·∫≠u', 'K·ª∑', 'Canh', 'T√¢n', 'Nh√¢m', 'Qu√Ω']
CHI_LIST = ['T√Ω', 'S·ª≠u', 'D·∫ßn', 'M√£o', 'Th√¨n', 'T·ªµ', 'Ng·ªç', 'M√πi', 'Th√¢n', 'D·∫≠u', 'Tu·∫•t', 'H·ª£i']
CAN_CHI_LIST = [f"{can} {chi}" for can in CAN_LIST for chi in CHI_LIST]
CAN_CHI_LIST_NOSPACE = [f"{can}{chi}" for can in CAN_LIST for chi in CHI_LIST]

def get_can_chi_ngay(year, month, day):
    can_list = CAN_LIST
    chi_list = CHI_LIST
    if month < 3:
        month += 12
        year -= 1
    a = year // 100
    b = 2 - a + a // 4
    jd = int(365.25 * (year + 4716)) + int(30.6001 * (month + 1)) + day + b - 1524
    can = can_list[(jd + 9) % 10]
    chi = chi_list[(jd + 1) % 12]
    return f"{can} {chi}"

def phong_thuy_info(can_chi):
    # L·∫•y s·ªë m·ªánh ƒë·∫∑c bi·ªát t·ª´ dict
    so_menh = CAN_CHI_DICT.get(can_chi, None)
    can = can_chi.split()[0]
    can_info = CAN_INFO.get(can, {})
    # T·∫°o ƒëo·∫°n gi·∫£i th√≠ch phong th·ªßy t·ªïng h·ª£p
    explain = []
    explain.append(f"üîÆ **Can Chi ng√†y:** `{can_chi}`")
    if can_info:
        explain.append(f"‚Ä¢ √Çm/D∆∞∆°ng: **{can_info.get('am_duong','?')}**")
        explain.append(f"‚Ä¢ Ng≈© h√†nh: **{can_info.get('ngu_hanh','?')}**")
        explain.append(f"‚Ä¢ Ph∆∞∆°ng v·ªã: **{can_info.get('phuong','?')}**")
    if so_menh:
        explain.append(f"‚Ä¢ Chu·ªói s·ªë m·ªánh: `{so_menh}`")
    explain.append("\n*H√£y d√πng ng√†y n√†y ƒë·ªÉ tham kh·∫£o c√°c c√¥ng vi·ªác, xu·∫•t h√†nh, c·∫ßu t√†i, ch·ªçn s·ªë ƒë·∫πp...*")
    return "\n".join(explain)

async def phongthuy_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    mode = context.user_data.get("mode")
    try:
        # --- PHONG TH·ª¶Y H√îM NAY ---
        if mode == "phongthuy_today":
            now = datetime.now()
            can_chi = get_can_chi_ngay(now.year, now.month, now.day)
            info = phong_thuy_info(can_chi)
            await update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
            context.user_data["mode"] = None
            return

        # --- PHONG TH·ª¶Y THEO NG√ÄY ho·∫∑c TRA CAN CHI ---
        if mode == "phongthuy":
            # Nh·∫≠p ng√†y d∆∞∆°ng l·ªãch
            if '-' in text and len(text.split('-')) in (2, 3):
                parts = [int(x) for x in text.split('-')]
                if len(parts) == 3:
                    y, m, d = parts
                elif len(parts) == 2:
                    now = datetime.now()
                    d, m = parts
                    y = now.year
                else:
                    raise ValueError
                can_chi = get_can_chi_ngay(y, m, d)
                info = phong_thuy_info(can_chi)
                await update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
                context.user_data["mode"] = None
                return
            # Nh·∫≠p tr·ª±c ti·∫øp Can Chi
            user_can_chi = text.title().replace(" ", "")
            can_chi_match = None
            if text.title() in CAN_CHI_LIST:
                can_chi_match = text.title()
            elif user_can_chi in CAN_CHI_LIST_NOSPACE:
                idx = CAN_CHI_LIST_NOSPACE.index(user_can_chi)
                can_chi_match = CAN_CHI_LIST[idx]
            if can_chi_match:
                info = phong_thuy_info(can_chi_match)
                await update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
                context.user_data["mode"] = None
                return
            # Kh√¥ng h·ª£p l·ªá
            await update.message.reply_text(
                "‚ùóÔ∏è Vui l√≤ng nh·∫≠p ng√†y d·∫°ng YYYY-MM-DD, DD-MM ho·∫∑c t√™n can chi h·ª£p l·ªá (VD: Gi√°p T√Ω, ƒêinh H·ª£i)."
            )
            context.user_data["mode"] = None
            return

        await update.message.reply_text("‚ùóÔ∏è Vui l√≤ng ch·ªçn l·∫°i ch·ª©c nƒÉng t·ª´ menu phong th·ªßy.")
    except Exception:
        await update.message.reply_text("‚ùóÔ∏è L·ªói ƒë·ªãnh d·∫°ng! H√£y nh·∫≠p ng√†y YYYY-MM-DD, DD-MM ho·∫∑c t√™n can chi.")
        context.user_data["mode"] = None
