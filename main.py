import os
import logging

# B·ªï sung nest_asyncio ƒë·ªÉ fix l·ªói event loop (c·∫ßn c√†i pip install nest_asyncio)
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from handlers.menu import (
    menu,
    help_command,
    reset_command,
    phongthuy_command,
    menu_callback_handler
)
from handlers.text_handlers import all_text_handler

# C·∫•u h√¨nh logger
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# L·∫•y BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå Bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # C√°c l·ªánh ch√≠nh
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("phongthuy", phongthuy_command))

    # Callback menu
    app.add_handler(CallbackQueryHandler(menu_callback_handler))

    # X·ª≠ l√Ω nh·∫≠p li·ªáu vƒÉn b·∫£n (s·ªë, ng√†y, can chi, ...)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))

    print("ü§ñ Bot Telegram ƒë√£ s·∫µn s√†ng!")
    await app.run_polling(close_loop=False)  # S·ª≠ d·ª•ng close_loop=False ƒë·ªÉ kh√¥ng t·ª± ƒë√≥ng event loop

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
