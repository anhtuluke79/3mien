import os
import logging
import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime, timedelta
import time
import re
import joblib
import subprocess
import shutil

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler,
    MessageHandler, filters
)
from itertools import combinations, permutations

# ==== DATA ====
from can_chi_dict import data as CAN_CHI_SO_HAP
from thien_can import CAN_INFO

# ==== CONFIG ====
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "12345678").split(',')))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GITHUB_REPO_PATH = os.getenv("GITHUB_REPO_PATH", ".")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def is_admin(user_id):
    return int(user_id) in ADMIN_IDS

# ==== TI·ªÜN √çCH ====
def split_numbers(s):
    return [n for n in s.replace(',', ' ').split() if n.isdigit()]

def ghep_xien(numbers, do_dai=2):
    if len(numbers) < do_dai: return []
    result = [tuple(map(str, comb)) for comb in combinations(numbers, do_dai)]
    return ['&'.join(comb) for comb in result]

def dao_so(s):
    arr = list(s)
    perm = set([''.join(p) for p in permutations(arr)])
    return sorted(list(perm))

def chuan_hoa_can_chi(s):
    return ' '.join(word.capitalize() for word in s.strip().split())

def get_can_chi_ngay(year, month, day):
    if month < 3:
        month += 12
        year -= 1
    a = year // 100
    b = 2 - a + a // 4
    jd = int(365.25 * (year + 4716)) + int(30.6001 * (month + 1)) + day + b - 1524
    can_list = ['Gi√°p', '·∫§t', 'B√≠nh', 'ƒêinh', 'M·∫≠u', 'K·ª∑', 'Canh', 'T√¢n', 'Nh√¢m', 'Qu√Ω']
    chi_list = ['T√Ω', 'S·ª≠u', 'D·∫ßn', 'M√£o', 'Th√¨n', 'T·ªµ', 'Ng·ªç', 'M√πi', 'Th√¢n', 'D·∫≠u', 'Tu·∫•t', 'H·ª£i']
    can = can_list[(jd + 9) % 10]
    chi = chi_list[(jd + 1) % 12]
    return f"{can} {chi}"

def sinh_so_hap_cho_ngay(can_chi_str):
    code = CAN_CHI_SO_HAP.get(can_chi_str)
    if not code: return None
    so_dau, rest = code.split('-')
    so_ghep = rest.split(',')
    can = can_chi_str.split()[0]
    info = CAN_INFO.get(can, {})
    so_menh = so_dau
    so_list = [so_menh] + so_ghep
    ket_qua = set()
    for i in range(len(so_list)):
        for j in range(len(so_list)):
            if i != j: ket_qua.add(so_list[i] + so_list[j])
    return {
        "can": can, "am_duong": info.get("am_duong"),
        "ngu_hanh": info.get("ngu_hanh"), "so_menh": so_menh,
        "so_hap_list": so_ghep, "so_gh√©p": sorted(list(ket_qua))
    }

def phong_thuy_format(can_chi, sohap_info, is_today=False, today_str=None):
    can = can_chi.split()[0]
    can_info = CAN_INFO.get(can, {})
    am_duong = can_info.get("am_duong", "?")
    ngu_hanh = can_info.get("ngu_hanh", "?")
    if sohap_info and 'so_hap_list' in sohap_info and len(sohap_info['so_hap_list']) >= 1:
        so_hap_can = sohap_info['so_menh']
        so_menh = ','.join(sohap_info['so_hap_list'])
    else: so_hap_can, so_menh = "?", "?"
    so_hap_ngay = ','.join(sohap_info['so_gh√©p']) if sohap_info and 'so_gh√©p' in sohap_info else "?"
    if is_today and today_str:
        main_line = f"üîÆ Phong th·ªßy NG√ÄY HI·ªÜN T·∫†I: {can_chi} ({today_str})"
    else:
        main_line = f"üîÆ Phong th·ªßy s·ªë ng≈© h√†nh cho ng√†y {can_chi}:"
    text = (
        f"{main_line}\n- Can: {can}, {am_duong} {ngu_hanh}, s·ªë h·∫°p {so_hap_can}\n"
        f"- S·ªë m·ªánh: {so_menh}\n- S·ªë h·∫°p ng√†y: {so_hap_ngay}"
    )
    return text

def chot_so_format(can_chi, sohap_info, today_str):
    if not sohap_info or not sohap_info.get("so_hap_list"):
        return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu phong th·ªßy ƒë·ªÉ ch·ªët s·ªë h√¥m nay!"
    d = [sohap_info['so_menh']] + sohap_info['so_hap_list']
    chams = ','.join(d)
    dan_de = []
    for x in d:
        for y in d:
            dan_de.append(x + y)
    dan_de = sorted(set(dan_de))
    lo = []
    for x in d:
        for y in d:
            if x != y: lo.append(x + y)
    lo = sorted(set(lo))
    icons = "üéâüçÄü•á"
    text = (
        f"{icons}\n*Ch·ªët s·ªë h√¥m nay {today_str} ({can_chi})*\n"
        f"ƒê·∫ßu - ƒëu√¥i (ƒê·∫∑c bi·ªát) - Gi·∫£i 1: ch·∫°m {chams}\n"
        f"D√†n ƒë·ªÅ: {', '.join(dan_de)}\nL√¥: {', '.join(lo)}"
    )
    return text

# ==== CRAWL XSMB ====
def crawl_xsmb_1ngay_minhchinh_dict(ngay, thang, nam):
    date_str = f"{ngay:02d}-{thang:02d}-{nam}"
    url = f"https://www.minhchinh.com/ket-qua-xo-so-mien-bac/{date_str}.html"
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(url, headers=headers, timeout=15)
    soup = BeautifulSoup(resp.text, "html.parser")
    tables = soup.find_all("table")
    table = None
    for tb in tables:
        trs = tb.find_all("tr")
        if len(trs) > 7 and any('ƒê·∫∑c bi·ªát' in tr.text or 'Nh·∫•t' in tr.text for tr in trs):
            table = tb
            break
    if not table:
        print(f"Kh√¥ng t√¨m th·∫•y b·∫£ng k·∫øt qu·∫£ {date_str}!")
        return None
    result = {"date": f"{nam}-{thang:02d}-{ngay:02d}"}
    for tr in table.find_all("tr"):
        tds = tr.find_all("td")
        if len(tds) < 2: continue
        label = tds[0].get_text(strip=True)
        value = tds[1].get_text(" ", strip=True)
        if "ƒê·∫∑c bi·ªát" in label or "ƒêB" in label:
            match = re.search(r'(\d{5})(?!.*\d)', value)
            if match:
                result["DB"] = match.group(1)
            else:
                result["DB"] = value
        elif "Nh·∫•t" in label: result["G1"] = value
        elif "Nh√¨" in label: result["G2"] = value
        elif "Ba" in label: result["G3"] = value
        elif "T∆∞" in label: result["G4"] = value
        elif "NƒÉm" in label: result["G5"] = value
        elif "S√°u" in label: result["G6"] = value
        elif "B·∫£y" in label: result["G7"] = value
    return result

def crawl_xsmb_15ngay_minhchinh_csv(out_csv=None):
    today = datetime.today()
    records = []
    for i in range(15):
        date = today - timedelta(days=i)
        try:
            row = crawl_xsmb_1ngay_minhchinh_dict(date.day, date.month, date.year)
            if row:
                records.append(row)
                print(f"‚úîÔ∏è {date.strftime('%d-%m-%Y')} OK")
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå {date.strftime('%d-%m-%Y')}: {e}")
    if records:
        df = pd.DataFrame(records)
        df = df.sort_values("date", ascending=False)
        if out_csv is None:
            out_csv = os.path.join(GITHUB_REPO_PATH, "xsmb.csv")
        df.to_csv(out_csv, index=False, encoding="utf-8-sig")
        print(f"\nƒê√£ l∆∞u t·ªïng h·ª£p 15 ng√†y v√†o: {out_csv}")
        return df
    else:
        print("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng√†y n√†o!")
        return None

# ==== TRAIN MODEL RF ====
def train_rf_model_main():
    try:
        from train_rf_xsmb import train_rf_model
        csv_path = os.path.join(GITHUB_REPO_PATH, "xsmb.csv")
        model_path = os.path.join(GITHUB_REPO_PATH, "rf_model_xsmb.pkl")
        train_rf_model(csv_path=csv_path, model_path=model_path)
        return True, "‚úÖ ƒê√£ train xong, l∆∞u rf_model_xsmb.pkl."
    except Exception as e:
        return False, f"‚ùå L·ªói train model: {e}"

# ==== AI D·ª∞ ƒêO√ÅN ====
def predict_xsmb_rf():
    model_path = os.path.join(GITHUB_REPO_PATH, "rf_model_xsmb.pkl")
    csv_path = os.path.join(GITHUB_REPO_PATH, "xsmb.csv")
    if not os.path.exists(model_path) or not os.path.exists(csv_path):
        return "‚ùå Model ho·∫∑c d·ªØ li·ªáu xsmb.csv ch∆∞a c√≥ tr√™n server!"
    model = joblib.load(model_path)
    df = pd.read_csv(csv_path)
    if len(df) < 3 or 'DB' not in df.columns or 'G1' not in df.columns:
        return "‚ùå D·ªØ li·ªáu kh√¥ng ƒë·ªß ho·∫∑c thi·∫øu c·ªôt DB, G1"
    features = []
    for i in range(-3, 0):
        day = df.iloc[i]
        features += [int(str(day['DB'])[-2:]), int(str(day['G1'])[-2:])]
    X_pred = [features]
    y_pred = model.predict(X_pred)
    return f"ü§ñ Th·∫ßn t√†i d·ª± ƒëo√°n gi·∫£i ƒë·∫∑c bi·ªát h√¥m nay (2 s·ªë cu·ªëi):\nüëâ {str(y_pred[0]).zfill(2)}\n(ML: Random Forest)"

# ==== TH·ªêNG K√ä X·ªî S·ªê C∆† B·∫¢N ====
def thong_ke_xsmb(n=30):
    csv_path = os.path.join(GITHUB_REPO_PATH, "xsmb.csv")
    if not os.path.exists(csv_path):
        return "‚ùå Ch∆∞a c√≥ file xsmb.csv tr√™n server!"
    df = pd.read_csv(csv_path)
    df = df.sort_values("date", ascending=False)
    msg = f"üìä Th·ªëng k√™ {n} ng√†y g·∫ßn nh·∫•t:\n"
    msg += "Ng√†y      | ƒê·∫∑c bi·ªát | Gi·∫£i nh·∫•t\n"
    msg += "-"*30 + "\n"
    for _, row in df.head(n).iterrows():
        msg += f"{row['date']} | {row['DB']} | {row['G1']}\n"
    return msg

# ==== BACKUP & RESTORE ====
def backup_files(to_dir="backup"):
    files = ["xsmb.csv", "rf_model_xsmb.pkl"]
    os.makedirs(to_dir, exist_ok=True)
    backed = []
    for f in files:
        src = os.path.join(GITHUB_REPO_PATH, f)
        dst = os.path.join(to_dir, f)
        if os.path.exists(src):
            shutil.copy2(src, dst)
            backed.append(dst)
    return backed

def restore_files(from_dir="backup"):
    files = ["xsmb.csv", "rf_model_xsmb.pkl"]
    restored = []
    for f in files:
        src = os.path.join(from_dir, f)
        dst = os.path.join(GITHUB_REPO_PATH, f)
        if os.path.exists(src):
            shutil.copy2(src, dst)
            restored.append(dst)
    return restored

# ==== MENU CALLBACK ====
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    keyboard = [
        [InlineKeyboardButton("ü§ñ Th·∫ßn t√†i d·ª± ƒëo√°n", callback_data="ml_predict")],
        [InlineKeyboardButton("‚ûï Gh√©p xi√™n", callback_data="menu_ghepxien")],
        [InlineKeyboardButton("üéØ Gh√©p c√†ng/ƒê·∫£o s·ªë", callback_data="menu_ghepcang")],
        [InlineKeyboardButton("üîÆ Phong th·ªßy", callback_data="phongthuy_ngay")],
        [InlineKeyboardButton("üéØ Ch·ªët s·ªë", callback_data="menu_chotso")],
        [InlineKeyboardButton("üìä Th·ªëng k√™", callback_data="thongke_xsmb")],
        [InlineKeyboardButton("üíó ·ª¶ng h·ªô", callback_data="ungho")],
    ]
    if user_id and is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è Qu·∫£n tr·ªã", callback_data="admin_menu")])
        keyboard.append([InlineKeyboardButton("üóÇ Backup/Restore", callback_data="backup_restore_menu")])
    if hasattr(update, "message") and update.message:
        await update.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• Crawl XSMB", callback_data="admin_crawl_xsmb")],
        [InlineKeyboardButton("üß† Train & L∆∞u model", callback_data="admin_train_rf")],
        [InlineKeyboardButton("‚¨ÜÔ∏è Upload model l√™n Github", callback_data="admin_upload_model")],
        [InlineKeyboardButton("‚¨ÜÔ∏è Upload xsmb.csv l√™n Github", callback_data="admin_upload_csv")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")],
    ]
    await update.callback_query.message.reply_text("‚öôÔ∏è Qu·∫£n tr·ªã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def backup_restore_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì§ Backup d·ªØ li·ªáu", callback_data="backup_data")],
        [InlineKeyboardButton("üì• Restore d·ªØ li·ªáu", callback_data="restore_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")],
    ]
    await update.callback_query.message.reply_text("üóÇ Backup / Restore d·ªØ li·ªáu:", reply_markup=InlineKeyboardMarkup(keyboard))

async def menu_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    # --- ADMIN ---
    if query.data == "admin_menu":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p menu qu·∫£n tr·ªã.")
            return
        await admin_menu(update, context)
        return

    # --- BACKUP/RESTORE ---
    if query.data == "backup_restore_menu":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.")
            return
        await backup_restore_menu(update, context)
        return
    if query.data == "backup_data":
        backed = backup_files()
        msg = "üì§ ƒê√£ backup: " + ", ".join(backed)
        # G·ª≠i file v·ªÅ Telegram
        for file_path in backed:
            with open(file_path, "rb") as f:
                await query.message.reply_document(document=InputFile(f))
        await query.edit_message_text(msg)
        return
    if query.data == "restore_data":
        restored = restore_files()
        msg = "üì• ƒê√£ restore: " + ", ".join(restored)
        await query.edit_message_text(msg)
        return

    # --- CRAWL, TRAIN, UPLOAD ---
    if query.data == "admin_crawl_xsmb":
        await query.edit_message_text("‚è≥ ƒêang crawl XSMB 15 ng√†y g·∫ßn nh·∫•t, vui l√≤ng ƒë·ª£i...")
        try:
            df = crawl_xsmb_15ngay_minhchinh_csv()
            if df is not None:
                await query.message.reply_document(document=open(os.path.join(GITHUB_REPO_PATH, "xsmb.csv"), "rb"), filename="xsmb.csv", caption="‚úÖ ƒê√£ crawl xong, ƒë√¢y l√† file xsmb.csv m·ªõi nh·∫•t!")
                try:
                    os.chdir(GITHUB_REPO_PATH)
                    subprocess.run(["git", "add", "xsmb.csv"], check=True)
                    subprocess.run(["git", "commit", "-m", "update xsmb.csv (auto after crawl)"], check=True)
                    subprocess.run(["git", "push"], check=True)
                    await query.message.reply_text("‚úÖ ƒê√£ upload xsmb.csv l√™n Github!")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå L·ªói upload xsmb.csv l√™n Github: {e}")
            else:
                await query.message.reply_text("‚ùå Kh√¥ng crawl ƒë∆∞·ª£c d·ªØ li·ªáu n√†o!")
        except Exception as e:
            await query.message.reply_text(f"‚ùå L·ªói crawl: {e}")
        return

    if query.data == "admin_train_rf":
        await query.edit_message_text("‚è≥ ƒêang train model RF...")
        ok, msg = train_rf_model_main()
        await query.message.reply_text(msg)
        if ok:
            try:
                os.chdir(GITHUB_REPO_PATH)
                subprocess.run(["git", "add", "rf_model_xsmb.pkl"], check=True)
                subprocess.run(["git", "commit", "-m", "update model rf_model_xsmb.pkl (auto after train)"], check=True)
                subprocess.run(["git", "push"], check=True)
                await query.message.reply_text("‚úÖ ƒê√£ upload rf_model_xsmb.pkl l√™n Github!")
            except Exception as e:
                await query.message.reply_text(f"‚ùå L·ªói upload model l√™n Github: {e}")
        return

    if query.data == "admin_upload_model":
        await query.edit_message_text("‚è≥ ƒêang upload model rf_model_xsmb.pkl l√™n Github...")
        try:
            os.chdir(GITHUB_REPO_PATH)
            subprocess.run(["git", "add", "rf_model_xsmb.pkl"], check=True)
            subprocess.run(["git", "commit", "-m", "update model rf_model_xsmb.pkl"], check=True)
            subprocess.run(["git", "push"], check=True)
            await query.message.reply_text("‚úÖ ƒê√£ upload file model rf_model_xsmb.pkl l√™n Github!")
        except Exception as e:
            await query.message.reply_text(f"‚ùå L·ªói upload model: {e}")
        return

    if query.data == "admin_upload_csv":
        await query.edit_message_text("‚è≥ ƒêang upload xsmb.csv l√™n Github...")
        try:
            os.chdir(GITHUB_REPO_PATH)
            subprocess.run(["git", "add", "xsmb.csv"], check=True)
            subprocess.run(["git", "commit", "-m", "update xsmb.csv"], check=True)
            subprocess.run(["git", "push"], check=True)
            await query.message.reply_text("‚úÖ ƒê√£ upload xsmb.csv l√™n Github!")
        except Exception as e:
            await query.message.reply_text(f"‚ùå L·ªói upload: {e}")
        return

    # --- D·ª∞ ƒêO√ÅN AI ---
    if query.data == "ml_predict":
        await query.edit_message_text("‚è≥ ƒêang d·ª± ƒëo√°n b·∫±ng AI Th·∫ßn t√†i (Random Forest)...")
        result = predict_xsmb_rf()
        await query.message.reply_text(result)
        await menu(update, context)
        return

    # --- TH·ªêNG K√ä ---
    if query.data == "thongke_xsmb":
        msg = thong_ke_xsmb(15)
        await query.edit_message_text(msg)
        return

    # --- GH√âP XI√äN/C√ÄNG/ƒê·∫¢O S·ªê/PHONG TH·ª¶Y/CH·ªêT S·ªê/·ª¶NG H·ªò... ---
    # (gi·ªØ nguy√™n nh∆∞ h∆∞·ªõng d·∫´n c√°c b·∫£n tr∆∞·ªõc, kh√¥ng ƒë·ªïi)

    if query.data == "main_menu":
        await menu(update, context)
        return

async def all_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # GH√âP C√ÄNG 3D
    if context.user_data.get('wait_for_cang3d_numbers'):
        arr = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not arr:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p d√£y s·ªë (v√≠ d·ª•: 23 32 28 ...)")
            return
        context.user_data['cang3d_numbers'] = arr
        context.user_data['wait_for_cang3d_numbers'] = False
        context.user_data['wait_for_cang3d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 1 2 3):")
        return
    if context.user_data.get('wait_for_cang3d_cangs'):
        cang_list = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not cang_list:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (v√≠ d·ª•: 1 2 3):")
            return
        numbers = context.user_data.get('cang3d_numbers', [])
        result = []
        for c in cang_list:
            for n in numbers:
                result.append(c + n)
        await update.message.reply_text(f"K·∫øt qu·∫£ gh√©p c√†ng 3D ({len(result)} s·ªë):\n" + ', '.join(result))
        context.user_data['wait_for_cang3d_cangs'] = False
        context.user_data['cang3d_numbers'] = []
        await menu(update, context)
        return

    # GH√âP C√ÄNG 4D
    if context.user_data.get('wait_for_cang4d_numbers'):
        arr = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not arr or not all(len(n) == 3 for n in arr):
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c s·ªë 3 ch·ªØ s·ªë, c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch (v√≠ d·ª•: 123 234 ...)")
            return
        context.user_data['cang4d_numbers'] = arr
        context.user_data['wait_for_cang4d_numbers'] = False
        context.user_data['wait_for_cang4d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 1 2 3):")
        return
    if context.user_data.get('wait_for_cang4d_cangs'):
        cang_list = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not cang_list:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (v√≠ d·ª•: 1 2 3):")
            return
        numbers = context.user_data.get('cang4d_numbers', [])
        result = []
        for c in cang_list:
            for n in numbers:
                result.append(c + n)
        await update.message.reply_text(f"K·∫øt qu·∫£ gh√©p c√†ng 4D ({len(result)} s·ªë):\n" + ', '.join(result))
        context.user_data['wait_for_cang4d_cangs'] = False
        context.user_data['cang4d_numbers'] = []
        await menu(update, context)
        return

    # GH√âP XI√äN
    if isinstance(context.user_data.get('wait_for_xien_input'), int):
        text_msg = update.message.text.strip()
        numbers = split_numbers(text_msg)
        do_dai = context.user_data.get('wait_for_xien_input')
        bo_xien = ghep_xien(numbers, do_dai)
        if not bo_xien:
            await update.message.reply_text("Kh√¥ng gh√©p ƒë∆∞·ª£c xi√™n.")
        else:
            if len(bo_xien) > 20:
                result = '\n'.join([', '.join(bo_xien[i:i+10]) for i in range(0, len(bo_xien), 10)])
            else:
                result = ', '.join(bo_xien)
            await update.message.reply_text(f"{len(bo_xien)} b·ªô xi√™n:\n{result}")
        context.user_data['wait_for_xien_input'] = False
        await menu(update, context)
        return

    # ƒê·∫¢O S·ªê
    if context.user_data.get('wait_for_daoso'):
        s = update.message.text.strip()
        arr = split_numbers(s)
        s_concat = ''.join(arr) if arr else s.replace(' ', '')
        if not s_concat.isdigit() or len(s_concat) < 2 or len(s_concat) > 6:
            await update.message.reply_text("Nh·∫≠p 1 s·ªë c√≥ t·ª´ 2 ƒë·∫øn 6 ch·ªØ s·ªë (v√≠ d·ª• 1234, 56789).")
        else:
            result = dao_so(s_concat)
            if len(result) > 20:
                text = '\n'.join([', '.join(result[i:i+10]) for i in range(0, len(result), 10)])
            else:
                text = ', '.join(result)
            await update.message.reply_text(f"T·ªïng {len(result)} ho√°n v·ªã:\n{text}")
        context.user_data['wait_for_daoso'] = False
        await menu(update, context)
        return

    # CH·ªêT S·ªê THEO NG√ÄY
    if context.user_data.get('wait_chot_so_ngay'):
        ngay = update.message.text.strip()
        try:
            parts = [int(x) for x in ngay.split('-')]
            if len(parts) == 3:
                y, m, d = parts
            elif len(parts) == 2:
                now = datetime.now()
                d, m = parts
                y = now.year
            else:
                raise ValueError("Sai ƒë·ªãnh d·∫°ng")
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            today_str = f"{d:02d}/{m:02d}/{y}"
            text = chot_so_format(can_chi, sohap_info, today_str)
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception:
            await update.message.reply_text("‚ùóÔ∏è Nh·∫≠p ng√†y kh√¥ng h·ª£p l·ªá! ƒê√∫ng ƒë·ªãnh d·∫°ng: YYYY-MM-DD ho·∫∑c DD-MM.")
        context.user_data['wait_chot_so_ngay'] = False
        await menu(update, context)
        return

    # PHONG TH·ª¶Y THEO NG√ÄY D∆Ø∆†NG
    if context.user_data.get('wait_phongthuy_ngay_duong'):
        ngay = update.message.text.strip()
        try:
            y, m, d = map(int, ngay.split('-'))
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            if sohap_info is None:
                await update.message.reply_text("‚ùóÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin can chi ho·∫∑c s·ªë h·∫°p cho ng√†y n√†y!")
            else:
                text = phong_thuy_format(can_chi, sohap_info)
                await update.message.reply_text(text, parse_mode="Markdown")
        except Exception:
            await update.message.reply_text("‚ùóÔ∏è Nh·∫≠p ng√†y kh√¥ng h·ª£p l·ªá! ƒê√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.")
        context.user_data['wait_phongthuy_ngay_duong'] = False
        await menu(update, context)
        return

    # PHONG TH·ª¶Y THEO CAN CHI
    if context.user_data.get('wait_phongthuy_ngay_canchi'):
        can_chi = chuan_hoa_can_chi(update.message.text.strip())
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        if sohap_info is None:
            await update.message.reply_text("‚ùóÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin can chi ho·∫∑c s·ªë h·∫°p v·ªõi t√™n b·∫°n nh·∫≠p! Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng (VD: Gi√°p T√Ω).")
        else:
            text = phong_thuy_format(can_chi, sohap_info)
            await update.message.reply_text(text, parse_mode="Markdown")
        context.user_data['wait_phongthuy_ngay_canchi'] = False
        await menu(update, context)
        return

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ü§ñ *Bot XSMB Phong th·ªßy AI*\n\n"
        "C√°c l·ªánh h·ªó tr·ª£:\n"
        "/start ho·∫∑c /menu - M·ªü menu ch√≠nh\n"
        "/help - Xem h∆∞·ªõng d·∫´n\n\n"
        "Ch·ª©c nƒÉng n·ªïi b·∫≠t:\n"
        "‚Ä¢ D·ª± ƒëo√°n AI XSMB\n"
        "‚Ä¢ Gh√©p xi√™n, c√†ng, ƒë·∫£o s·ªë\n"
        "‚Ä¢ Tra c·ª©u phong th·ªßy ng√†y\n"
        "‚Ä¢ Ch·ªët s·ªë, h·ªó tr·ª£ nhi·ªÅu ch·∫ø ƒë·ªô\n"
        "‚Ä¢ Th·ªëng k√™, qu·∫£n tr·ªã, backup, c·∫≠p nh·∫≠t model\n"
        "‚Ä¢ Nh·∫≠n g√≥p √Ω, ph·∫£n h·ªìi, ·ªßng h·ªô bot"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception while handling an update:", exc_info=context.error)
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üö® Exception:\n{context.error}"
            )
        except Exception:
            pass

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CallbackQueryHandler(menu_callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))
    app.add_error_handler(error_handler)
    logger.info("ü§ñ BOT XSMB ƒë√£ ch·∫°y th√†nh c√¥ng!")
    app.run_polling()

if __name__ == "__main__":
    main()
