import os
import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler,
    MessageHandler, filters
)
from itertools import product, combinations, permutations
from datetime import datetime
from can_chi_dict import data as CAN_CHI_SO_HAP
from thien_can import CAN_INFO

# ============= CONFIG ============
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "12345678").split(',')))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============= TI·ªÜN √çCH ============
def split_numbers(s):
    return [n for n in s.replace(',', ' ').split() if n.isdigit()]

def ghep_xien(numbers, do_dai=2):
    if len(numbers) < do_dai:
        return []
    result = [tuple(map(str, comb)) for comb in combinations(numbers, do_dai)]
    return ['&'.join(comb) for comb in result]

def dao_so(s):
    arr = list(s)
    perm = set([''.join(p) for p in permutations(arr)])
    return sorted(list(perm))

def chuan_hoa_can_chi(s):
    return ' '.join(word.capitalize() for word in s.strip().split())

def get_can_chi_ngay(year, month, day):
    if month < 3:
        month += 12
        year -= 1
    a = year // 100
    b = 2 - a + a // 4
    jd = int(365.25 * (year + 4716)) + int(30.6001 * (month + 1)) + day + b - 1524

    can_list = ['Gi√°p', '·∫§t', 'B√≠nh', 'ƒêinh', 'M·∫≠u', 'K·ª∑', 'Canh', 'T√¢n', 'Nh√¢m', 'Qu√Ω']
    chi_list = ['T√Ω', 'S·ª≠u', 'D·∫ßn', 'M√£o', 'Th√¨n', 'T·ªµ', 'Ng·ªç', 'M√πi', 'Th√¢n', 'D·∫≠u', 'Tu·∫•t', 'H·ª£i']
    can = can_list[(jd + 9) % 10]
    chi = chi_list[(jd + 1) % 12]
    return f"{can} {chi}"

def sinh_so_hap_cho_ngay(can_chi_str):
    code = CAN_CHI_SO_HAP.get(can_chi_str)
    if not code:
        return None
    so_dau, rest = code.split('-')
    so_ghep = rest.split(',')
    can = can_chi_str.split()[0]
    info = CAN_INFO.get(can, {})
    so_menh = so_dau
    so_list = [so_menh] + so_ghep
    ket_qua = set()
    for i in range(len(so_list)):
        for j in range(len(so_list)):
            if i != j:
                ket_qua.add(so_list[i] + so_list[j])
    return {
        "can": can,
        "am_duong": info.get("am_duong"),
        "ngu_hanh": info.get("ngu_hanh"),
        "so_menh": so_menh,
        "so_hap_list": so_ghep,
        "so_gh√©p": sorted(list(ket_qua))
    }

def phong_thuy_format(can_chi, sohap_info, is_today=False, today_str=None):
    can = can_chi.split()[0]
    can_info = CAN_INFO.get(can, {})
    am_duong = can_info.get("am_duong", "?")
    ngu_hanh = can_info.get("ngu_hanh", "?")

    if sohap_info and 'so_hap_list' in sohap_info and len(sohap_info['so_hap_list']) >= 1:
        so_hap_can = sohap_info['so_menh']
        so_menh = ','.join(sohap_info['so_hap_list'])
    else:
        so_hap_can = "?"
        so_menh = "?"

    so_hap_ngay = ','.join(sohap_info['so_gh√©p']) if sohap_info and 'so_gh√©p' in sohap_info else "?"

    if is_today and today_str:
        main_line = f"üîÆ Phong th·ªßy NG√ÄY HI·ªÜN T·∫†I: {can_chi} ({today_str})"
    else:
        main_line = f"üîÆ Phong th·ªßy s·ªë ng≈© h√†nh cho ng√†y {can_chi}:"

    text = (
        f"{main_line}\n"
        f"- Can: {can}, {am_duong} {ngu_hanh}, s·ªë h·∫°p {so_hap_can}\n"
        f"- S·ªë m·ªánh: {so_menh}\n"
        f"- S·ªë h·∫°p ng√†y: {so_hap_ngay}"
    )
    return text

def chot_so_format(can_chi, sohap_info, today_str):
    if not sohap_info or not sohap_info.get("so_hap_list"):
        return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu phong th·ªßy ƒë·ªÉ ch·ªët s·ªë h√¥m nay!"

    d = [sohap_info['so_menh']] + sohap_info['so_hap_list']
    chams = ','.join(d)
    dan_de = []
    for x in d:
        for y in d:
            dan_de.append(x + y)
    dan_de = sorted(set(dan_de))
    lo = []
    for x in d:
        for y in d:
            if x != y:
                lo.append(x + y)
    lo = sorted(set(lo))
    icons = "üéâüçÄü•á"
    text = (
        f"{icons}\n"
        f"*Ch·ªët s·ªë 3 mi·ªÅn ng√†y {today_str} ({can_chi})*\n"
        f"ƒê·∫ßu - ƒëu√¥i (ƒê·∫∑c bi·ªát) - Gi·∫£i 1: ch·∫°m {chams}\n"
        f"D√†n ƒë·ªÅ: {', '.join(dan_de)}\n"
        f"L√¥: {', '.join(lo)}"
    )
    return text

# ========== MENU & CALLBACK ==========
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï Gh√©p xi√™n", callback_data="menu_ghepxien")],
        [InlineKeyboardButton("üéØ Gh√©p c√†ng/ƒê·∫£o s·ªë", callback_data="menu_ghepcang")],
        [InlineKeyboardButton("üîÆ Phong th·ªßy", callback_data="phongthuy_ngay")],
        [InlineKeyboardButton("üéØ Ch·ªët s·ªë", callback_data="menu_chotso")],
        [InlineKeyboardButton("üíó ƒê√≥ng g√≥p", callback_data="donggop")],
    ]
    if hasattr(update, "message") and update.message:
        await update.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))

async def menu_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "menu_ghepxien":
        keyboard = [
            [InlineKeyboardButton("Xi√™n 2", callback_data="ghepxien_2"),
             InlineKeyboardButton("Xi√™n 3", callback_data="ghepxien_3"),
             InlineKeyboardButton("Xi√™n 4", callback_data="ghepxien_4")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")]
        ]
        await query.edit_message_text("Ch·ªçn lo·∫°i xi√™n:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if query.data == "menu_ghepcang":
        keyboard = [
            [InlineKeyboardButton("C√†ng 3D", callback_data="ghepcang_3d"),
             InlineKeyboardButton("C√†ng 4D", callback_data="ghepcang_4d"),
             InlineKeyboardButton("ƒê·∫£o s·ªë", callback_data="daoso")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")]
        ]
        await query.edit_message_text("Ch·ªçn lo·∫°i c√†ng ho·∫∑c ƒë·∫£o s·ªë:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if query.data == "menu_chotso":
        keyboard = [
            [InlineKeyboardButton("Ch·ªët s·ªë h√¥m nay", callback_data="chot_so_today")],
            [InlineKeyboardButton("Ch·ªët s·ªë theo ng√†y", callback_data="chot_so_ngay")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")]
        ]
        await query.edit_message_text("Ch·ªçn c√°ch ch·ªët s·ªë:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if query.data == "main_menu":
        await menu(update, context)
        return

    if query.data == "ghepxien_2":
        context.user_data['wait_for_xien_input'] = 2
        await query.edit_message_text("Nh·∫≠p d√£y s·ªë ƒë·ªÉ gh√©p xi√™n 2 (c√°ch nhau d·∫•u c√°ch ho·∫∑c ph·∫©y):")
    elif query.data == "ghepxien_3":
        context.user_data['wait_for_xien_input'] = 3
        await query.edit_message_text("Nh·∫≠p d√£y s·ªë ƒë·ªÉ gh√©p xi√™n 3 (c√°ch nhau d·∫•u c√°ch ho·∫∑c ph·∫©y):")
    elif query.data == "ghepxien_4":
        context.user_data['wait_for_xien_input'] = 4
        await query.edit_message_text("Nh·∫≠p d√£y s·ªë ƒë·ªÉ gh√©p xi√™n 4 (c√°ch nhau d·∫•u c√°ch ho·∫∑c ph·∫©y):")
    
    # ========== GH√âP C√ÄNG 3D/4D m·ªõi ==========
    elif query.data == "ghepcang_3d":
        context.user_data['wait_for_cang3d_numbers'] = True
        await query.edit_message_text("Nh·∫≠p d√£y s·ªë c·∫ßn gh√©p (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 23 32 28 82 ...):")
    elif query.data == "ghepcang_4d":
        context.user_data['wait_for_cang4d_numbers'] = True
        await query.edit_message_text("Nh·∫≠p d√£y s·ªë c·∫ßn gh√©p (3 ch·ªØ s·ªë, c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 123 234 345 ...):")
    elif query.data == "daoso":
        context.user_data['wait_for_daoso'] = True
        await query.edit_message_text("Nh·∫≠p m·ªôt s·ªë ho·∫∑c d√£y s·ªë (VD: 123 ho·∫∑c 1234):")

    elif query.data == "phongthuy_ngay":
        keyboard = [
            [InlineKeyboardButton("Theo ng√†y d∆∞∆°ng (YYYY-MM-DD)", callback_data="phongthuy_ngay_duong")],
            [InlineKeyboardButton("Theo can chi (VD: Gi√°p T√Ω)", callback_data="phongthuy_ngay_canchi")],
            [InlineKeyboardButton("Ng√†y hi·ªán t·∫°i", callback_data="phongthuy_ngay_today")],
        ]
        await query.edit_message_text("üîÆ B·∫°n mu·ªën tra phong th·ªßy theo ki·ªÉu n√†o?", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "phongthuy_ngay_duong":
        await query.edit_message_text("üìÖ Nh·∫≠p ng√†y d∆∞∆°ng l·ªãch (YYYY-MM-DD):")
        context.user_data['wait_phongthuy_ngay_duong'] = True
    elif query.data == "phongthuy_ngay_canchi":
        await query.edit_message_text("üìú Nh·∫≠p can chi (v√≠ d·ª•: Gi√°p T√Ω):")
        context.user_data['wait_phongthuy_ngay_canchi'] = True
    elif query.data == "phongthuy_ngay_today":
        now = datetime.now()
        y, m, d = now.year, now.month, now.day
        can_chi = get_can_chi_ngay(y, m, d)
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        today_str = f"{d:02d}/{m:02d}/{y}"
        text = phong_thuy_format(can_chi, sohap_info, is_today=True, today_str=today_str)
        await query.edit_message_text(text, parse_mode="Markdown")

    # ===== CH·ªêT S·ªê PHONG TH·ª¶Y (H√îM NAY ho·∫∑c THEO NG√ÄY) =====
    elif query.data == "chot_so_today":
        now = datetime.now()
        y, m, d = now.year, now.month, now.day
        can_chi = get_can_chi_ngay(y, m, d)
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        today_str = f"{d:02d}/{m:02d}/{y}"
        text = chot_so_format(can_chi, sohap_info, today_str)
        await query.edit_message_text(text, parse_mode="Markdown")
    elif query.data == "chot_so_ngay":
        await query.edit_message_text(
            "üìÖ Nh·∫≠p ng√†y d∆∞∆°ng l·ªãch mu·ªën ch·ªët s·ªë:\n"
            "- ƒê·ªãnh d·∫°ng ƒë·∫ßy ƒë·ªß: YYYY-MM-DD (vd: 2025-07-11)\n"
            "- Ho·∫∑c ch·ªâ ng√†y-th√°ng: DD-MM (vd: 11-07, s·∫Ω l·∫•y nƒÉm hi·ªán t·∫°i)"
        )
        context.user_data['wait_chot_so_ngay'] = True

    elif query.data == "donggop":
        keyboard = [
            [InlineKeyboardButton("G·ª≠i g√≥p √Ω", callback_data="donggop_gui")],
            [InlineKeyboardButton("Danh d·ª±", callback_data="donggop_danhdu")]
        ]
        info = (
            "üíó *C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m v√† ·ªßng h·ªô bot!*\n\n"
            "B·∫°n c√≥ th·ªÉ g·ª≠i g√≥p √Ω, √Ω t∆∞·ªüng v√† ƒë√≥ng g√≥p 100.000/th√°ng ƒë·ªÉ bot duy tr√¨ ph√°t tri·ªÉn l√¢u d√†i.\n"
            "üëâ G√≥p √Ω: Ch·ªçn 'G·ª≠i g√≥p √Ω' b√™n d∆∞·ªõi ho·∫∑c g·ª≠i tr·ª±c ti·∫øp qua Telegram.\n"
            "üëâ ·ª¶ng h·ªô: Vietcombank: 0071003914986 (Tr∆∞∆°ng Anh T√∫)\n\n"
            "Ho·∫∑c xem 'Danh d·ª±' ƒë·ªÉ xem b·∫£ng tri √¢n nh·ªØng ng∆∞·ªùi ƒë√£ g·ª≠i g√≥p √Ω/·ªßng h·ªô. üôè"
        )
        await query.edit_message_text(info, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    elif query.data == "donggop_gui":
        await query.edit_message_text(
            "üôè Vui l√≤ng nh·∫≠p g√≥p √Ω, ph·∫£n h·ªìi ho·∫∑c l·ªùi nh·∫Øn c·ªßa b·∫°n (m·ªçi g√≥p √Ω ƒë·ªÅu ƒë∆∞·ª£c ghi nh·∫≠n v√† tri √¢n c√¥ng khai)."
        )
        context.user_data['wait_for_donggop'] = True
    elif query.data == "donggop_danhdu":
        log_file = "donggop_log.txt"
        names = set()
        if os.path.exists(log_file):
            with open(log_file, encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split("|")
                    if len(parts) >= 3:
                        name = parts[1].strip()
                        names.add(name)
        if not names:
            msg = "Ch∆∞a c√≥ ai g·ª≠i g√≥p √Ω/ƒë√≥ng g√≥p. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n nh√©! üíó"
        else:
            msg = "üèÜ *B·∫£ng danh d·ª± nh·ªØng ng∆∞·ªùi ƒë√£ g·ª≠i g√≥p √Ω/·ªßng h·ªô:*\n"
            msg += "\n".join([f"‚ù§Ô∏è {name}" for name in sorted(names)])
        await query.edit_message_text(msg, parse_mode="Markdown")

# ========== ALL TEXT HANDLER ==========
async def all_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type in ["group", "supergroup"]:
        bot_username = "@xs3mbot"
        text = update.message.text.lower()
        if not (text.startswith("/") or bot_username in text):
            return

    if context.user_data.get('wait_for_donggop'):
        user = update.message.from_user
        username = user.username or user.full_name or str(user.id)
        text = update.message.text.strip()
        with open("donggop_log.txt", "a", encoding="utf-8") as f:
            f.write(f"{datetime.now()} | {username} | {user.id} | {text}\n")
        await update.message.reply_text(
            "üíó C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i g√≥p √Ω/·ªßng h·ªô! T·∫•t c·∫£ ph·∫£n h·ªìi ƒë·ªÅu ƒë∆∞·ª£c tr√¢n tr·ªçng ghi nh·∫≠n.\n"
            "B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot ho·∫∑c g·ª≠i g√≥p √Ω th√™m b·∫•t c·ª© l√∫c n√†o."
        )
        context.user_data['wait_for_donggop'] = False
        await menu(update, context)
        return

    if isinstance(context.user_data.get('wait_for_xien_input'), int):
        text_msg = update.message.text.strip()
        numbers = split_numbers(text_msg)
        do_dai = context.user_data.get('wait_for_xien_input')
        bo_xien = ghep_xien(numbers, do_dai)
        if not bo_xien:
            await update.message.reply_text("Kh√¥ng gh√©p ƒë∆∞·ª£c xi√™n.")
        else:
            if len(bo_xien) > 20:
                result = '\n'.join([', '.join(bo_xien[i:i+10]) for i in range(0, len(bo_xien), 10)])
            else:
                result = ', '.join(bo_xien)
            await update.message.reply_text(f"{len(bo_xien)} b·ªô xi√™n:\n{result}")
        context.user_data['wait_for_xien_input'] = False
        await menu(update, context)
        return

    # ========= GH√âP C√ÄNG 3D/4D m·ªõi =========
    if context.user_data.get('wait_for_cang3d_numbers'):
        arr = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not arr:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p d√£y s·ªë (v√≠ d·ª•: 23 32 28 ...)")
            return
        context.user_data['cang3d_numbers'] = arr
        context.user_data['wait_for_cang3d_numbers'] = False
        context.user_data['wait_for_cang3d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 1 2 3):")
        return

    if context.user_data.get('wait_for_cang3d_cangs'):
        cang_list = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not cang_list:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (v√≠ d·ª•: 1 2 3):")
            return
        numbers = context.user_data.get('cang3d_numbers', [])
        result = []
        for c in cang_list:
            for n in numbers:
                result.append(c + n)
        await update.message.reply_text(f"K·∫øt qu·∫£ gh√©p c√†ng 3D ({len(result)} s·ªë):\n" + ', '.join(result))
        context.user_data['wait_for_cang3d_cangs'] = False
        context.user_data['cang3d_numbers'] = []
        await menu(update, context)
        return

    if context.user_data.get('wait_for_cang4d_numbers'):
        arr = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not arr or not all(len(n) == 3 for n in arr):
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c s·ªë 3 ch·ªØ s·ªë, c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch (v√≠ d·ª•: 123 234 ...)")
            return
        context.user_data['cang4d_numbers'] = arr
        context.user_data['wait_for_cang4d_numbers'] = False
        context.user_data['wait_for_cang4d_cangs'] = True
        await update.message.reply_text("Nh·∫≠p c√°c c√†ng mu·ªën gh√©p (c√°ch nhau ph·∫©y ho·∫∑c d·∫•u c√°ch, v√≠ d·ª•: 1 2 3):")
        return

    if context.user_data.get('wait_for_cang4d_cangs'):
        cang_list = [n for n in update.message.text.replace(',', ' ').split() if n.isdigit()]
        if not cang_list:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p c√°c c√†ng (v√≠ d·ª•: 1 2 3):")
            return
        numbers = context.user_data.get('cang4d_numbers', [])
        result = []
        for c in cang_list:
            for n in numbers:
                result.append(c + n)
        await update.message.reply_text(f"K·∫øt qu·∫£ gh√©p c√†ng 4D ({len(result)} s·ªë):\n" + ', '.join(result))
        context.user_data['wait_for_cang4d_cangs'] = False
        context.user_data['cang4d_numbers'] = []
        await menu(update, context)
        return

    if context.user_data.get('wait_for_daoso'):
        s = update.message.text.strip()
        arr = split_numbers(s)
        s_concat = ''.join(arr) if arr else s.replace(' ', '')
        if not s_concat.isdigit() or len(s_concat) < 2 or len(s_concat) > 6:
            await update.message.reply_text("Nh·∫≠p 1 s·ªë c√≥ t·ª´ 2 ƒë·∫øn 6 ch·ªØ s·ªë (v√≠ d·ª• 1234, 56789).")
        else:
            result = dao_so(s_concat)
            if len(result) > 20:
                text = '\n'.join([', '.join(result[i:i+10]) for i in range(0, len(result), 10)])
            else:
                text = ', '.join(result)
            await update.message.reply_text(f"T·ªïng {len(result)} ho√°n v·ªã:\n{text}")
        context.user_data['wait_for_daoso'] = False
        await menu(update, context)
        return

    # ==== CH·ªêT S·ªê THEO NG√ÄY ====
    if context.user_data.get('wait_chot_so_ngay'):
        ngay = update.message.text.strip()
        try:
            parts = [int(x) for x in ngay.split('-')]
            if len(parts) == 3:
                y, m, d = parts
            elif len(parts) == 2:
                now = datetime.now()
                d, m = parts
                y = now.year
            else:
                raise ValueError("Sai ƒë·ªãnh d·∫°ng")
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            today_str = f"{d:02d}/{m:02d}/{y}"
            text = chot_so_format(can_chi, sohap_info, today_str)
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception:
            await update.message.reply_text("‚ùóÔ∏è Nh·∫≠p ng√†y kh√¥ng h·ª£p l·ªá! ƒê√∫ng ƒë·ªãnh d·∫°ng: YYYY-MM-DD ho·∫∑c DD-MM.")
        context.user_data['wait_chot_so_ngay'] = False
        await menu(update, context)
        return

    if context.user_data.get('wait_phongthuy_ngay_duong'):
        ngay = update.message.text.strip()
        try:
            y, m, d = map(int, ngay.split('-'))
            can_chi = get_can_chi_ngay(y, m, d)
            sohap_info = sinh_so_hap_cho_ngay(can_chi)
            if sohap_info is None:
                await update.message.reply_text("‚ùóÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin can chi ho·∫∑c s·ªë h·∫°p cho ng√†y n√†y!")
            else:
                text = phong_thuy_format(can_chi, sohap_info)
                await update.message.reply_text(text, parse_mode="Markdown")
        except Exception:
            await update.message.reply_text("‚ùóÔ∏è Nh·∫≠p ng√†y kh√¥ng h·ª£p l·ªá! ƒê√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.")
        context.user_data['wait_phongthuy_ngay_duong'] = False
        await menu(update, context)
        return

    if context.user_data.get('wait_phongthuy_ngay_canchi'):
        can_chi = chuan_hoa_can_chi(update.message.text.strip())
        sohap_info = sinh_so_hap_cho_ngay(can_chi)
        if sohap_info is None:
            await update.message.reply_text("‚ùóÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin can chi ho·∫∑c s·ªë h·∫°p v·ªõi t√™n b·∫°n nh·∫≠p! Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng (VD: Gi√°p T√Ω).")
        else:
            text = phong_thuy_format(can_chi, sohap_info)
            await update.message.reply_text(text, parse_mode="Markdown")
        context.user_data['wait_phongthuy_ngay_canchi'] = False
        await menu(update, context)
        return

    await update.message.reply_text("Bot ƒë√£ nh·∫≠n tin nh·∫Øn c·ªßa b·∫°n!")
    await menu(update, context)

# ========== MAIN ==========
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(menu_callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
