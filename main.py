import os
import logging
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from handlers.menu import (
    menu,
    help_command,
    reset_command,
    phongthuy_command,
    menu_callback_handler,
)
from handlers.text_handlers import all_text_handler

# Thi·∫øt l·∫≠p logger
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# L·∫•y BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng Railway
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå Bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ƒêƒÉng k√Ω handler cho c√°c l·ªánh
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("phongthuy", phongthuy_command))

    # Callback menu & c√°c n√∫t Inline
    app.add_handler(CallbackQueryHandler(menu_callback_handler))

    # X·ª≠ l√Ω c√°c message TEXT t·ª´ user
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))

    logger.info("ü§ñ Bot Telegram ƒë√£ s·∫µn s√†ng! Railway production")
    await app.run_polling()  # KH√îNG c·∫ßn close_loop=False

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
