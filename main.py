import os
import logging
import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime, timedelta
import time
import re

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler,
    MessageHandler, filters
)
from itertools import combinations, permutations
from can_chi_dict import data as CAN_CHI_SO_HAP
from thien_can import CAN_INFO

# ============= CONFIG ============
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "12345678").split(',')))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============= PH√ÇN QUY·ªÄN ADMIN ============
def is_admin(user_id):
    return int(user_id) in ADMIN_IDS

# ============= CRAWL XSMB ============
def crawl_xsmb_1ngay_minhchinh_dict(ngay, thang, nam):
    """
    Crawl k·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc 1 ng√†y t·ª´ minhchinh.com.
    Tr·∫£ v·ªÅ dict g·ªìm c√°c gi·∫£i: ƒêB, G1, G2, G3, G4, G5, G6, G7.
    Ri√™ng gi·∫£i ƒêB ch·ªâ gi·ªØ l·∫°i 5 ch·ªØ s·ªë sau c√πng. N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c, tr·∫£ v·ªÅ None.
    """
    date_str = f"{ngay:02d}-{thang:02d}-{nam}"
    url = f"https://www.minhchinh.com/ket-qua-xo-so-mien-bac/{date_str}.html"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    resp = requests.get(url, headers=headers, timeout=15)
    soup = BeautifulSoup(resp.text, "html.parser")
    # T√¨m b·∫£ng ƒë·∫ßu ti√™n c√≥ > 7 d√≤ng v√† c√≥ ch·ªØ "ƒê·∫∑c bi·ªát" ho·∫∑c "Nh·∫•t"
    tables = soup.find_all("table")
    table = None
    for tb in tables:
        trs = tb.find_all("tr")
        if len(trs) > 7 and any('ƒê·∫∑c bi·ªát' in tr.text or 'Nh·∫•t' in tr.text for tr in trs):
            table = tb
            break

    if not table:
        print(f"Kh√¥ng t√¨m th·∫•y b·∫£ng k·∫øt qu·∫£ {date_str}!")
        return None

    result = {"date": f"{nam}-{thang:02d}-{ngay:02d}"}
    for tr in table.find_all("tr"):
        tds = tr.find_all("td")
        if len(tds) < 2: continue
        label = tds[0].get_text(strip=True)
        value = tds[1].get_text(" ", strip=True)
        # Chu·∫©n h√≥a t√™n c·ªôt
        if "ƒê·∫∑c bi·ªát" in label or "ƒêB" in label:
            match = re.search(r'(\d{5})(?!.*\d)', value)
            if match:
                result["DB"] = match.group(1)
            else:
                result["DB"] = value
        elif "Nh·∫•t" in label:
            result["G1"] = value
        elif "Nh√¨" in label:
            result["G2"] = value
        elif "Ba" in label:
            result["G3"] = value
        elif "T∆∞" in label:
            result["G4"] = value
        elif "NƒÉm" in label:
            result["G5"] = value
        elif "S√°u" in label:
            result["G6"] = value
        elif "B·∫£y" in label:
            result["G7"] = value
    return result

def crawl_xsmb_15ngay_minhchinh_csv(out_csv="xsmb.csv"):
    today = datetime.today()
    records = []
    for i in range(15):
        date = today - timedelta(days=i)
        try:
            row = crawl_xsmb_1ngay_minhchinh_dict(date.day, date.month, date.year)
            if row:
                records.append(row)
                print(f"‚úîÔ∏è {date.strftime('%d-%m-%Y')} OK")
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå {date.strftime('%d-%m-%Y')}: {e}")
    if records:
        df = pd.DataFrame(records)
        df = df.sort_values("date", ascending=False)
        df.to_csv(out_csv, index=False, encoding="utf-8-sig")
        print(f"\nƒê√£ l∆∞u t·ªïng h·ª£p 15 ng√†y v√†o: {out_csv}")
        return df
    else:
        print("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng√†y n√†o!")
        return None

# ============= TI·ªÜN √çCH PHONG TH·ª¶Y, XI√äN, CH·ªêT S·ªê ============
# ... gi·ªØ nguy√™n c√°c ti·ªán √≠ch b·∫°n g·ª≠i ·ªü tr√™n ...

# ========== MENU & CALLBACK ==========
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = (
        update.effective_user.id
        if update.effective_user
        else (update.message.from_user.id if update.message else None)
    )
    keyboard = [
        [InlineKeyboardButton("‚ûï Gh√©p xi√™n", callback_data="menu_ghepxien")],
        [InlineKeyboardButton("üéØ Gh√©p c√†ng/ƒê·∫£o s·ªë", callback_data="menu_ghepcang")],
        [InlineKeyboardButton("üîÆ Phong th·ªßy", callback_data="phongthuy_ngay")],
        [InlineKeyboardButton("üéØ Ch·ªët s·ªë", callback_data="menu_chotso")],
        [InlineKeyboardButton("üíó ƒê√≥ng g√≥p", callback_data="donggop")],
    ]
    if user_id and is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è Qu·∫£n tr·ªã", callback_data="admin_menu")])

    if hasattr(update, "message") and update.message:
        await update.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("üîπ Ch·ªçn ch·ª©c nƒÉng:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• Crawl XSMB", callback_data="admin_crawl_xsmb")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu", callback_data="main_menu")],
    ]
    if hasattr(update, "message") and update.message:
        await update.message.reply_text("‚öôÔ∏è Qu·∫£n tr·ªã:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("‚öôÔ∏è Qu·∫£n tr·ªã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def crawl_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    await update.message.reply_text("‚è≥ ƒêang crawl k·∫øt qu·∫£ XSMB 15 ng√†y g·∫ßn nh·∫•t...")
    try:
        df = crawl_xsmb_15ngay_minhchinh_csv("xsmb.csv")
        if df is not None:
            file_path = "xsmb.csv"
            await update.message.reply_document(document=open(file_path, "rb"), filename="xsmb.csv", caption="‚úÖ ƒê√£ crawl xong, ƒë√¢y l√† file k·∫øt qu·∫£ XSMB 15 ng√†y g·∫ßn nh·∫•t!")
        else:
            await update.message.reply_text("‚ùå Kh√¥ng crawl ƒë∆∞·ª£c d·ªØ li·ªáu n√†o.")
    except Exception as e:
        await update.message.reply_text(f"‚ùó L·ªói khi crawl: {e}")

async def menu_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # ... c√°c callback menu c≈© gi·ªØ nguy√™n ...

    if query.data == "admin_menu":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p menu qu·∫£n tr·ªã.")
            return
        await admin_menu(update, context)
        return

    if query.data == "admin_crawl_xsmb":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
            return
        await query.edit_message_text("‚è≥ ƒêang crawl k·∫øt qu·∫£ XSMB 15 ng√†y g·∫ßn nh·∫•t, vui l√≤ng ƒë·ª£i...")
        try:
            df = crawl_xsmb_15ngay_minhchinh_csv("xsmb.csv")
            if df is not None:
                file_path = "xsmb.csv"
                await query.message.reply_document(document=open(file_path, "rb"), filename="xsmb.csv", caption="‚úÖ ƒê√£ crawl xong, ƒë√¢y l√† file k·∫øt qu·∫£ XSMB 15 ng√†y g·∫ßn nh·∫•t!")
            else:
                await query.message.reply_text("‚ùå Kh√¥ng crawl ƒë∆∞·ª£c d·ªØ li·ªáu n√†o.")
        except Exception as e:
            await query.message.reply_text(f"‚ùó L·ªói khi crawl: {e}")
        return

    # ... c√°c callback kh√°c gi·ªØ nguy√™n ...

# ========== ALL TEXT HANDLER ==========
# ... gi·ªØ nguy√™n h√†m all_text_handler c·ªßa b·∫°n ...

# ========== MAIN ==========
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("crawl", crawl_handler))
    app.add_handler(CallbackQueryHandler(menu_callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
