import os
import logging
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from menu_handlers import menu, menu_callback_handler
from admin_handlers import admin_callback_handler
from user_manage import user_manage_callback_handler
from logic_xsmb import xsmb_text_handler
from so_gh√©p import so_ghep_text_handler
# KH√îNG import phongthuy_homnay_handler ·ªü ƒë√¢y!

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ==== TEXT HANDLER ROUTER ====
async def all_text_handler(update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")
    user_id = update.effective_user.id
    logger.info(f"[all_text_handler] User {user_id} mode: {mode}")

    if mode == "xiens":
        await so_ghep_text_handler(update, context)
        return
    if mode == "cang3d":
        await so_ghep_text_handler(update, context)
        return
    if mode == "cang4d":
        await so_ghep_text_handler(update, context)
        return
    if mode == "daoso":
        await so_ghep_text_handler(update, context)
        return
    if mode == "phongthuy":
        from phongthuy import phongthuy_text_handler  # import t·∫°i ƒë√¢y ƒë·ªÉ tr√°nh l·ªói v√≤ng l·∫∑p
        await phongthuy_text_handler(update, context)
        return
    if mode == "xsmb" or mode == "thongke":
        await xsmb_text_handler(update, context)
        return

    # N·∫øu user ch∆∞a ch·ªçn ch·ª©c nƒÉng n√†o th√¨ h∆∞·ªõng d·∫´n r√µ r√†ng
    await update.message.reply_text(
        "B·∫°n ch∆∞a ch·ªçn ch·ª©c nƒÉng. H√£y b·∫•m /menu ho·∫∑c s·ª≠ d·ª•ng menu d∆∞·ªõi ƒë√¢y ƒë·ªÉ b·∫Øt ƒë·∫ßu."
    )
    logger.info(f"User {user_id} g·ª≠i tin nh·∫Øn ngo√†i ch·∫ø ƒë·ªô nh·∫≠p, ƒë√£ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n.")

# ==== CALLBACK ROUTER ====
async def global_callback_handler(update, context):
    data = update.callback_query.data
    user_id = update.effective_user.id
    logger.info(f"[global_callback_handler] User {user_id} callback data: {data}")

    # Route theo prefix callback
    if data.startswith("admin_") or data.startswith("backup_") or data.startswith("restore_"):
        await admin_callback_handler(update, context)
        return
    if data.startswith("user_manage_"):
        await user_manage_callback_handler(update, context)
        return
    await menu_callback_handler(update, context)  # default: menu v√† c√°c ch·ª©c nƒÉng th∆∞·ªùng

# ==== HELP ====
async def help_handler(update, context):
    text = (
        "ü§ñ *Bot XSMB Phong th·ªßy AI*\n\n"
        "C√°c l·ªánh h·ªó tr·ª£:\n"
        "/start ho·∫∑c /menu - M·ªü menu ch√≠nh\n"
        "/help - Xem h∆∞·ªõng d·∫´n\n\n"
        "B·∫°n ch·ªçn ch·ª©c nƒÉng b·∫±ng menu ho·∫∑c g√µ s·ªë, c√†ng, ...\n"
        "N·∫øu g·∫∑p l·ªói ho·∫∑c c·∫ßn h·ªó tr·ª£, li√™n h·ªá admin."
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# ==== ERROR LOG ====
async def error_handler(update, context):
    logger.error("Exception while handling an update:", exc_info=context.error)
    # C√≥ th·ªÉ b√°o l·ªói cho admin ·ªü ƒë√¢y n·∫øu c·∫ßn

# ==== MAIN ====
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", menu))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CallbackQueryHandler(global_callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, all_text_handler))
    app.add_error_handler(error_handler)
    logger.info("ü§ñ BOT XSMB ƒë√£ ch·∫°y th√†nh c√¥ng!")
    app.run_polling()

if __name__ == "__main__":
    main()
